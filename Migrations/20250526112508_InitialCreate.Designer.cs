// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webbshoppen.Data;

#nullable disable

namespace Webbshoppen.Migrations
{
    [DbContext(typeof(Databas))]
    [Migration("20250526112508_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Webbshoppen.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lösenord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Webbshoppen.Models.BeställdVara", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Antal")
                        .HasColumnType("int");

                    b.Property<int>("BeställningId")
                        .HasColumnType("int");

                    b.Property<int>("BeställningsId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrisVidKöp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduktId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeställningId");

                    b.HasIndex("ProduktId");

                    b.ToTable("BeställVaror");
                });

            modelBuilder.Entity("Webbshoppen.Models.Beställning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BetalningsAlternativId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KundId")
                        .HasColumnType("int");

                    b.Property<int>("LeveransAlternativId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBelopp")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BetalningsAlternativId");

                    b.HasIndex("KundId");

                    b.HasIndex("LeveransAlternativId");

                    b.ToTable("Beställningar");
                });

            modelBuilder.Entity("Webbshoppen.Models.BetalningsAlternativ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Pris")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BetalningsAlternativ");
                });

            modelBuilder.Entity("Webbshoppen.Models.Kategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kategorier");
                });

            modelBuilder.Entity("Webbshoppen.Models.Kund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kunder");
                });

            modelBuilder.Entity("Webbshoppen.Models.LeveransAlternativ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Leveranstid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Pris")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("LeveransAlternativ");
                });

            modelBuilder.Entity("Webbshoppen.Models.Produkt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kategori")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KategoriId")
                        .HasColumnType("int");

                    b.Property<int>("LagerSaldo")
                        .HasColumnType("int");

                    b.Property<string>("Leverantör")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Pris")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Special")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.ToTable("Produkter");
                });

            modelBuilder.Entity("Webbshoppen.Models.BeställdVara", b =>
                {
                    b.HasOne("Webbshoppen.Models.Beställning", "Beställning")
                        .WithMany("BeställdaVaror")
                        .HasForeignKey("BeställningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webbshoppen.Models.Produkt", "Produkt")
                        .WithMany()
                        .HasForeignKey("ProduktId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beställning");

                    b.Navigation("Produkt");
                });

            modelBuilder.Entity("Webbshoppen.Models.Beställning", b =>
                {
                    b.HasOne("Webbshoppen.Models.BetalningsAlternativ", "BetalningsAlternativ")
                        .WithMany()
                        .HasForeignKey("BetalningsAlternativId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webbshoppen.Models.Kund", "Kund")
                        .WithMany("Beställningar")
                        .HasForeignKey("KundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webbshoppen.Models.LeveransAlternativ", "LeveransAlternativ")
                        .WithMany()
                        .HasForeignKey("LeveransAlternativId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BetalningsAlternativ");

                    b.Navigation("Kund");

                    b.Navigation("LeveransAlternativ");
                });

            modelBuilder.Entity("Webbshoppen.Models.Produkt", b =>
                {
                    b.HasOne("Webbshoppen.Models.Kategori", null)
                        .WithMany("Produkter")
                        .HasForeignKey("KategoriId");
                });

            modelBuilder.Entity("Webbshoppen.Models.Beställning", b =>
                {
                    b.Navigation("BeställdaVaror");
                });

            modelBuilder.Entity("Webbshoppen.Models.Kategori", b =>
                {
                    b.Navigation("Produkter");
                });

            modelBuilder.Entity("Webbshoppen.Models.Kund", b =>
                {
                    b.Navigation("Beställningar");
                });
#pragma warning restore 612, 618
        }
    }
}
